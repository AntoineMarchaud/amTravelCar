plugins {
    //android
    alias libs.plugins.com.android.application
    //jetbrains
    alias libs.plugins.org.jetbrains.kotlin.android
    alias libs.plugins.org.jetbrains.kotlin.serializable
    //Hilt
    alias libs.plugins.com.google.devtools.ksp
    alias libs.plugins.com.google.dagger.hilt.android

    id 'kotlin-parcelize'
}

android {
    compileSdk 34

    namespace  "com.amarchaud.travelcar"

    buildFeatures {
        viewBinding true
        buildConfig = true
    }

    defaultConfig {
        applicationId "com.amarchaud.travelcar"
        minSdk 29
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            buildConfigField "String", "ENDPOINT", "\"https://gist.githubusercontent.com/\""
        }

        release {
            buildConfigField "String", "ENDPOINT", "\"https://gist.githubusercontent.com/\""
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17.toString()
        targetCompatibility JavaVersion.VERSION_17.toString()


        kotlin.sourceSets.configureEach {
            languageSettings.optIn("kotlin.RequiresOptIn")
        }
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {

    //Hilt
    implementation(libs.hilt.android)
    implementation(libs.bundles.hilt.androidx)
    implementation libs.material
    ksp(libs.hiltCompiler)

    // Ktx
    implementation libs.activity.ktx
    implementation libs.core.ktx
    implementation libs.fragment.ktx

    // retrofit
    implementation libs.bundles.api
    ksp(libs.moshiCodeGen)

    // room
    implementation libs.bundles.room
    ksp(libs.roomCompiler)

    // glide
    implementation libs.glide
    ksp(libs.glideCompiler)

    // gson
    implementation libs.gson

    // date
    implementation libs.threetenabp

    // for Place autocomplete
    implementation libs.play.services.location
    implementation libs.places

    // test
    testImplementation libs.bundles.test
}